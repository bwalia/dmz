{
    "dns_resolver": {
        "nameservers": {
            "secondary": "10.0.0.10",
            "port": "53",
            "primary": "10.0.0.10"
        }
    },
    "nginx": {
        "default": {
        "no_rule": "",
        "no_server": "",
        "conf_mismatch": ""        },
        "content_type": "text\/html"
    },
    "env_vars": {
        "REDIS_PORT": 6379,
        "API_PAGE_SIZE": 100,
        "VITE_DEPLOYMENT_TIME": "20240821210059",
        "NGINX_CONFIG_DIR": "\/opt\/nginx",
        "JWT_SECURITY_PASSPHRASE": "HCsKpxQ4hU97V5us5TCwvLnAVBgLqNd1dP2R-4Uywg7946J3zAqT9EOA5hdWRCQn",
        "CONTROL_PLANE_API_URL": "http:\/\/gateway.dmz.it.com/\/api",
        "FRONT_URL": "http:\/\/frontend.dmz.it.com",
        "REDIS_HOST": "dmz-redis",
        "HOSTNAME": "localhost",
        "STACK": "Lua 5.1",
        "APP_NAME": "dmz",
        "VERSION": "1.0"
    },
    "redis_host": "",
    "redis_port": "localhost",
    "roles": [
        "release_manager",
        "admin",
        "read_only",
        "read_write"
    ],
    "env_profile": "prod",
    "ip2location_path": "\/usr\/local\/openresty\/nginx\/IP2LOCATION-LITE-DB11.IPV6.BIN",
    "super_user": {
        "password": "jGl25bVBBBW96Qi9Te4V37Fnqchz\/Eu4qB9vKrRIqRg=",
        "email": "admin@admin.com",
        "username": "admin"
    },
    "consul": {
        "dns_server_host": "127.0.0.1",
        "dns_server_port": 8600
    },
    "storage_type": "disk"
  }