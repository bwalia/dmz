
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;
    proxy_cache_path  /tmp/nginx/cache  levels=1:2    keys_zone=STATIC:10m
    inactive=24h  max_size=1g;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    upstream backend {
        server localhost:8888       weight=9;
        server localhost:8889;
        server localhost:8890   backup;
    }

    lua_package_path '/usr/local/Cellar/openresty/1.19.3.1_1/site/lualib/resty/?.lua;;';
    lua_package_cpath '/usr/local/Cellar/openresty/1.19.3.1_1/site/lualib/resty/?.so;;';

    server {
        listen       8888;
        server_name  app.localhost;
        default_type text/html;
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
        set $jwt_cookie_is_set 'false';

        access_by_lua_block {
            local cjson = require "cjson"
            local jwt = require "resty.jwt"

            local jwt_cookie_val = ngx.var.cookie_APP_TOKEN
                -- set jwt cookie if empty
            if jwt_cookie_val ~= nil then
                ngx.log(ngx.INFO, "jwt_cookie_val: " .. jwt_cookie_val)                    
            else
                
                local jwt_token = jwt:sign(
                    "YOUR_SECRET_KEY",
                    {
                        header={typ="JWT", alg="HS256"},
                        payload={user="YOUR_USER_EMAIL_OR_NAME"},
                        exp={ngx.time() + 3600}
                    }
                )

            ngx.header['Set-Cookie'] = 'APP_TOKEN=' .. jwt_token .. '; path=/'
            end
            ngx.header['X-Request-Id'] = ngx.var.request_id
        }

        # content_by_lua_block
        # {
        #     ngx.status = ngx.HTTP_OK
        #     ngx.say("jwt_cookie_val")
        #     ngx.exit(ngx.HTTP_OK)
        # }


        if ($http_user_agent ~ MSIE) {
          return 480;
        }

        if ($http_user_agent ~ 'rv:11') {
          return 480;
        }

        proxy_set_header host 'frontend.localhost';
        proxy_pass http://frontend.localhost;
            
        }

        location /api {
        set $api_gw_authenticated_ok 'false';

        content_by_lua_block {
            local cjson = require "cjson"
            local jwt = require "resty.jwt"
            local jwt_cookie_val = ngx.var.cookie_APP_TOKEN

            if jwt_cookie_val ~= nil then
                local jwt_obj = jwt:verify("YOUR_SECRET_KEY",jwt_cookie_val)
                if jwt_obj.verified == true then
                    ngx.var.api_gw_authenticated_ok = jwt_obj.verified
                end
            end

            if ngx.var.api_gw_authenticated_ok == "true" then

                res = ngx.location.capture("/api_secured",
                    { share_all_vars = true });
                    ngx.status = res.status
                    ngx.print(res.body)
                    ngx.exit(ngx.HTTP_OK)
            else
            
                ngx.status = ngx.HTTP_FORBIDDEN
                ngx.say("<h1>Forbidden by API Gateway</h1>")
                ngx.exit(ngx.HTTP_FORBIDDEN)

            end
        }    
        }  #api location end

        location /api_secured {
            internal;
            proxy_set_header host 'api.localhost';
            proxy_pass http://api.localhost;
        }
    }
            
    server {
        listen       8888;
        server_name  frontend.localhost;
        default_type text/html;
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            content_by_lua_block {
            ngx.status = ngx.HTTP_OK
            ngx.say("<h1>Frontend is up and running</h1>")
            }
            #return 200 'UK only information home page!';
        }

        location /api {
            proxy_set_header host 'api.localhost';
            proxy_pass http://api.localhost;
        }

    }

    server {
        listen       8888;
        server_name  adminer.localhost;
        default_type text/html;
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            proxy_set_header Host "localhost";
            proxy_pass http://localhost:8080/;
        }

    }

    server {
        listen       8888;
        server_name  api.localhost;
        default_type application/json;

        location /api {
            return 200 '{"mysecretdata": ["This is dummy data but secret data", "This is dummy data but secret data", "This is dummy data but secret data","This is dummy data but secret data"]}';
        }

    }

    server {
        listen       8888;
        server_name  dmz.localhost;
        default_type text/html;
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            include includes/cache.conf;
            proxy_set_header Host "thirsty-kare-3813c7.netlify.app";
            proxy_pass https://thirsty-kare-3813c7.netlify.app/;
        }

    }

    server {
            listen       8888;
            server_name  loadbalancetest.localhost;
            default_type text/html;
            #charset koi8-r;

            #access_log  logs/host.access.log  main;

            location / {
                proxy_pass http://backend/;
            }
    }

    # server {
    #         listen       8888;
    #         default_type text/html;
    #         #charset koi8-r;

    #         #access_log  logs/host.access.log  main;

    #         location / {
    #             return 200 "Origin 8888";
    #         }
    # }

    server {
            listen       8889;
            default_type text/html;
            #charset koi8-r;

            #access_log  logs/host.access.log  main;

            location / {
                return 200 "Origin 8889";
            }
    }

    server {
            listen       8890;
            default_type text/html;
            #charset koi8-r;

            #access_log  logs/host.access.log  main;

            location / {
                return 200 "Origin 8890 Backup only";
            }
    }


    server {
        listen       80;
        server_name  localhost;
        default_type text/html;
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
                include includes/cache.conf;
            proxy_set_header Host "edgeone.cloud";
            proxy_pass http://edgeone.cloud/;
        }


        location /hello_world {
            return 200 "Hello world";
        }

        location = /index.html {
            index index.html;
            root html;
        }


        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       880800;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}

