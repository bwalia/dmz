#!/bin/bash
set -x

if [ -z "$1" ]
  then
    echo "No nginx sync flag supplied"
    exit 0
else
    NGINX_DATA_SYNC_ENABLED="$1"
    echo "OK, The Nginx sync flag is supplied"
fi

if [ "$NGINX_DATA_SYNC_ENABLED" == "yes" ]; then
  echo "Nginx Data sync is enabled"
  touch /tmp/nginx/nginx-data-sync-required
else
  rm -f /tmp/nginx/nginx-data-sync-required
  echo "OK, The Nginx Data sync is disabled"
  exit 0
fi

if [ -z "$2" ]

  then
    echo "No sync api user email supplied"
    exit 0
else
    HDOPENRESTY_API_USER_EMAIL="$2"
    echo "OK, The sync api user email is supplied"
fi

if [ -z "$3" ]

  then
    echo "No sync api user passwd supplied"
    exit 0
else
    HDOPENRESTY_API_USER_PASSWD="$3"
    echo "OK, The sync api user passwd is supplied"
fi

if [ -z "$4" ]

  then
    echo "No sync api token supplied"
    exit 0
else
    HDOPENRESTY_HDOPENRESTY_TARGET_HASH="$4"
    echo "OK, The sync api token is supplied"
fi

if [ -z "$5" ]

  then
    echo "No sync api serial no supplied"
    exit 0
else
    HDOPENRESTY_API_SERIAL_NO="$5"
    echo "OK, The sync api serial no is supplied"
fi

date=$(date "+%Y%m%d-%H%M%S")

FILEPATH=/var/run/nginx/nginx-data-sync.log

echo "${date} Checking, should Nginx Data sync required?" >> $FILEPATH

if [ -f /tmp/nginx/nginx-data-sync-required ]; then
  echo "Nginx Data sync is required"

  # MAXSIZE is 5 MB
  MAXSIZE=500000

  # Get file size
  FILESIZE=$(stat -c%s "$FILEPATH")
  echo "Size of $FILEPATH = $FILESIZE bytes."

  # Checkpoint if file size is greater than 1 MB create new log file
  if [[ $FILESIZE > $MAXSIZE ]] ;then
        # truncate and append if file size is more than 5 MB
    echo "${date} Nginx Data sync" > $FILEPATH
  else
    # append if file size is less than 5 MB
    echo "${date} Nginx Data sync" >> $FILEPATH
  fi
  
  # curl -o $FILEPATH "http://{{ host_lan_ip }}/frontdoor/opsapi/sync?envprofile=prod&settings=false"
  # curl -o $FILEPATH "http://{{ host_lan_ip }}/frontdoor/opsapi/sync?envprofile=acc&settings=false"

  # curl "http://{{ host_lan_ip }}/frontdoor/opsapi/sync?envprofile=prod&settings=false" >> $FILEPATH
  # curl "http://{{ host_lan_ip }}/frontdoor/opsapi/sync?envprofile=acc&settings=false" >> $FILEPATH

  # This script brlow is used to sync the control plane of the DMZ application with the target instance.
  # It requires the following environment variables to be set:
  # - HDOPENRESTY_TARGET_HASH: The hash of the target instance
  # - HDOPENRESTY_API_SERIAL_NO: The serial number of the target instance

HDOPENRESTY_CONTROL_PLANE_API_URL="dmz.kubes.healthdata.be"

TOKEN=$(curl -X POST https://${HDOPENRESTY_CONTROL_PLANE_API_URL}/api/user/login -H 'accept: application/json' -H 'Content-Type: application/json' -d "{\"email\": \"${HDOPENRESTY_API_USER_EMAIL}\",\"password\": \"${HDOPENRESTY_API_USER_PASSWD}\"}" | jq -r '.data.accessToken')

curl -g -X GET 'http://{{ host_lan_ip }}/frontdoor/opsapi/sync?envprofile=prod&settings=false&instance_hash=${HDOPENRESTY_TARGET_HASH}&serial_number=${HDOPENRESTY_API_SERIAL_NO}' \
-H 'accept: */*' \
-H "Authorization: Bearer ${TOKEN}" | tee -a $FILEPATH

exit 0
else
  echo "Nginx Data sync is not required"
  rm -f /tmp/nginx/nginx-data-sync-required
  exit 0
fi