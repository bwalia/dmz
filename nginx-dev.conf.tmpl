# source: nginx-dev.conf.tmpl 
# user  nobody;
worker_processes  1;

#error_log  logs/error.log;
# error_log  logs/error.log  notice;
 error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

env DNS_RESOLVER;
env REDIS_HOST;
env HOSTNAME;
env APP_NAME;
env LUA_DEBUG;
env VERSION;
env STACK;
env VITE_DEPLOYMENT_TIME;
env NGINX_CONFIG_DIR;
env JWT_SECURITY_PASSPHRASE;
env CONTROL_PLANE_API_URL;
env PRIMARY_DNS_RESOLVER;
env SECONDARY_DNS_RESOLVER;
env DNS_RESOLVER_PORT;
env FRONT_URL;
env AWS_ACCESS_KEY_ID;
env AWS_SECRET_ACCESS_KEY;
env AWS_REGION;

http {
    include       mime.types;
    default_type  application/octet-stream;

    server_names_hash_bucket_size 1024;
    server_names_hash_max_size 1024;

    log_format  main  '$remote_addr $host - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" "$host" "$server_name" "$http_host"';

    log_format sslparams '$remote_addr - $remote_user [$time_local] "$request" $status '
                  '$body_bytes_sent "$http_referer" "$http_user_agent" '
                  '"$http_x_forwarded_for" $request_id $msec $request_time '
                  '$upstream_connect_time $upstream_header_time $upstream_response_time $host $ssl_protocol $ssl_cipher';

    access_log  /var/log/nginx/access.log  main;
    sendfile        on;
    # tcp_nopush     on;

    # keepalive_timeout  0;
    keepalive_timeout  65;

    gzip  on;
    lua_package_path "/usr/local/openresty/nginx/html/api/?.lua;;";
    # lua_package_path '/usr/local/Cellar/openresty/1.19.3.1_1/site/lualib/resty/?.lua;;';
    lua_package_cpath '/usr/local/openresty/site/lualib/resty/?.so;;';

   # Storage for challenge token and cert cache

    lua_shared_dict auto_ssl 100m;
    lua_shared_dict auto_ssl_settings 64k;

    init_by_lua_file /usr/local/openresty/nginx/html/api/init.lua;

    geo $limit {
        default 1;
        10.0.0.0/8 0;
        192.168.0.0/24 0;
    }
    
    map $limit $limit_key {
        0 "";
        1 $binary_remote_addr;
    }

    limit_req_zone $limit_key zone=req_zone:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=req_zone_wl:10m rate=15r/s;

#    init_by_lua_block  {
#        cjson = require("cjson")
#        require "resty.session".init({
#          remember = true,
#          audience = "dmz",
#          storage  = "redis",
#          redis = {
#            host = os.getenv("REDIS_HOST"),
#            port = 6379,
#          }
#        })
#    }
# moved to init.lua file

    server {
        listen       8080;
        server_name  localhost;

        limit_req zone=req_zone burst=10 nodelay;
        limit_req zone=req_zone_wl burst=20 nodelay;

        include /tmp/resolver.conf;     # For kubernetes use 10.43.0.10 and nginx ingress controller

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html/openresty-admin/dist;
            index  index.html index.htm;
        }
        client_max_body_size    256M;
        client_body_buffer_size 128k;

        location ~ ^/api(.*)$ {
            default_type 'text/plain';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Content-Type';
            access_by_lua_block {
                local path_name = ngx.var.uri:match("^/api/(.*)$")
                if path_name ~= "user/login" then
                    local jwt = JWT
                    local token = ngx.req.get_headers()["Authorization"]
                    if not token then
                        ngx.status = ngx.HTTP_UNAUTHORIZED
                        ngx.say("Missing token")
                        return ngx.exit(ngx.HTTP_UNAUTHORIZED)
                    end
                    token = string.gsub(token, "^Bearer ", "")
                    local function getSettings()
                      local configPath = os.getenv("NGINX_CONFIG_DIR") or "/opt/nginx/"
                      local readSettings, errSettings = io.open(configPath .. "data/settings.json", "rb")
                      local settings = {}
                      if readSettings == nil then
                          ngx.say("Couldn't read file: " .. errSettings)
                      else
                          local jsonString = readSettings:read "*a"
                          readSettings:close()
                          settings = Cjson.decode(jsonString)
                      end
                      return settings
                    end
                    local settings = getSettings()
                    if settings and type(settings) == "table" then
                      local passPhrase = settings.env_vars.JWT_SECURITY_PASSPHRASE or os.getenv("JWT_SECURITY_PASSPHRASE")
                      if not passPhrase or passPhrase == "" then
                        ngx.status = ngx.HTTP_UNAUTHORIZED
                        ngx.say(Cjson.encode({data = {message = "JWT Pass Phrase is missing"}}))
                        return ngx.exit(ngx.HTTP_UNAUTHORIZED)
                      end
                      local verified_token = jwt:verify(passPhrase, token)
                      if verified_token.verified == false then
                          ngx.status = ngx.HTTP_UNAUTHORIZED
                          ngx.say(Cjson.encode({data = {message = verified_token.reason}}))
                          return ngx.exit(ngx.HTTP_UNAUTHORIZED)
                      end
                    else
                      ngx.status = ngx.HTTP_UNAUTHORIZED
                      ngx.say(Cjson.encode({data = {message = "Settings Json file missing, Please make sure you have correctly placed the setting json file while initlising the project."}}))
                      return ngx.exit(ngx.HTTP_UNAUTHORIZED)
                    end
                end
            }
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                # add_header 'Content-Length' 0;
                return 204;
            }

            content_by_lua_file /usr/local/openresty/nginx/html/api/api.lua; # < Points to Lua file
        }

        location /redis-connect {
            default_type 'application/json';
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            # add_header 'Content-Length' 0;
            content_by_lua_file /usr/local/openresty/nginx/html/api/redis_connect.lua;
        }

        location /ping {
            default_type 'application/json';
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            # add_header 'Content-Length' 0;
            content_by_lua_file /usr/local/openresty/nginx/html/api/ping.lua;
        }

        location /swagger {
          root   html;
          index  swagger.html swagger.htm;
        }

        location /security-rules {
            default_type 'application/json';
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            # add_header 'Content-Length' 0;
            content_by_lua_file /usr/local/openresty/nginx/html/api/security_rules.lua;
        }

        location /__ip_location {
            default_type text/html;
            content_by_lua_block {
                local ip2location = require('ip2location')
                local ip2loc = ip2location:new('/tmp/IP2LOCATION-LITE-DB11.IPV6.BIN')
                local result = ip2loc:get_all(ngx.var.remote_addr)
                ngx.say("country_short: " .. result.country_short)
                ngx.say("country_long: " .. result.country_long)
                ngx.say("region: " .. result.region)
                ngx.say("city: " .. result.city)
                ngx.say("isp: " .. result.isp)
                ngx.say("latitude: " .. result.latitude)
                ngx.say("longitude: " .. result.longitude)
                ngx.say("domain: " .. result.domain)
                ngx.say("zipcode: " .. result.zipcode)
                ngx.say("timezone: " .. result.timezone)
                ngx.say("netspeed: " .. result.netspeed)
                ngx.say("iddcode: " .. result.iddcode)
                ngx.say("areacode: " .. result.areacode)
                ngx.say("weatherstationcode: " .. result.weatherstationcode)
                ngx.say("weatherstationname: " .. result.weatherstationname)
                ngx.say("mcc: " .. result.mcc)
                ngx.say("mnc: " .. result.mnc)
                ngx.say("mobilebrand: " .. result.mobilebrand)
                ngx.say("elevation: " .. result.elevation)
                ngx.say("usagetype: " .. result.usagetype)
                ngx.say("addresstype: " .. result.addresstype)
                ngx.say("category: " .. result.category)
                ngx.say("district: " .. result.district)
                ngx.say("asn: " .. result.asn)
                ngx.say("as: " .. result.as)
                ip2loc:close()
            }
        }


        location /__redis_test {            
            default_type 'application/json';
            content_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()

                red:set_timeouts(1000, 1000, 1000) -- 1 sec

                -- or connect to a unix domain socket file listened
                -- by a redis server:
                --     local ok, err = red:connect("unix:/path/to/redis.sock")

                -- connect via ip address directly
                local ok, err = red:connect("redis", 6379)

                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end

                ok, err = red:set("dog", "an animal")
                if not ok then
                    ngx.say("failed to set dog: ", err)
                    return
                end

                ngx.say("set result: ", ok)

                local res, err = red:get("dog")
                if not res then
                    ngx.say("failed to get dog: ", err)
                    return
                end

                if res == ngx.null then
                    ngx.say("dog not found.")
                    return
                end

                ngx.say("dog: ", res)

                red:init_pipeline()
                red:set("cat", "Marry")
                red:set("horse", "Bob")
                red:get("cat")
                red:get("horse")
                local results, err = red:commit_pipeline()
                if not results then
                    ngx.say("failed to commit the pipelined requests: ", err)
                    return
                end

                for i, res in ipairs(results) do
                    if type(res) == "table" then
                        if res[1] == false then
                            ngx.say("failed to run command ", i, ": ", res[2])
                        else
                            -- process the table value
                        end
                    else
                        -- process the scalar value
                    end
                end

                -- put it into the connection pool of size 100,
                -- with 10 seconds max idle time
                local ok, err = red:set_keepalive(10000, 100)
                if not ok then
                    ngx.say("failed to set keepalive: ", err)
                    return
                end

                -- or just close the connection right away:
                -- local ok, err = red:close()
                -- if not ok then
                --     ngx.say("failed to close: ", err)
                --     return
                -- end
            }

        }

        #comment
        error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        location ~ /\.ht {
            deny  all;
        }

        location /start {
          default_type text/html;
          content_by_lua_block {
            local session = require "resty.session".new()
            session:set_subject("OpenResty Fan")
            session:set("quote", "The quick brown fox jumps over the lazy dog")
            local ok, err = session:save()
           
            ngx.say(string.format([[
              <html>
              <body>
                <p>Session started (%s)</p>
                <p><button><a href=/started>Check if it really was</a></button></p>
              </body>
              </html>
            ]], err or "no error"))
          }
        }
    
        location /started {
          default_type text/html;
          content_by_lua_block {
            local session, err = require "resty.session".start()
            
            ngx.say(string.format([[
              <html>
              <body>
                <p>Session was started by %s (%s)</p>
                <p><blockquote>%s</blockquote></p>
                <p><button><a href=/modify>Modify the session</a></button></p>
              </body>
              </html>
            ]],
              session:get_subject() or "Anonymous",
              err or "no error",
              session:get("quote") or "no quote"
            ))
          }
        }
        
        location /modify {
          default_type text/html;
          content_by_lua_block {
            local session, err = require "resty.session".start()
            session:set_subject("Lua Fan")
            session:set("quote", "Lorem ipsum dolor sit amet")
            local _, err_save = session:save()
            
            ngx.say(string.format([[
              <html>
              <body>
                <p>Session was modified (%s)</p>
                <p><a href=/modified>Check if it is modified</a></p>
              </body>
              </html>
            ]], err or err_save or "no error"))
          }
        }
        
        location /modified {
          default_type text/html;
          content_by_lua_block {
            local session, err = require "resty.session".start()
    
            ngx.say(string.format([[
              <html>
              <body>
                <p>Session was started by %s (%s)</p>
                <p><blockquote>%s</blockquote></p>
                <p><button><a href=/destroy>Destroy the session</a></button></p>
              </body>
              </html>
            ]],
              session:get_subject() or "Anonymous",
              err or "no error",
              session:get("quote")  or "no quote"
            ))
          }
        }
        
        location /destroy {
          default_type text/html;
          content_by_lua_block {
            local ok, err = require "resty.session".destroy()
    
            ngx.say(string.format([[
              <html>
              <body>
                <p>Session was destroyed (%s)</p>
                <p><button><a href=/destroyed>Check that it really was?</a></button></p>
              </body>
              </html>
            ]], err or "no error"))
          }
        }
        
        location /destroyed {
          default_type text/html;
          content_by_lua_block {
            local session, err = require "resty.session".open()
    
            ngx.say(string.format([[
              <html>
              <body>
                <p>Session was really destroyed, you are known as %s (%s)</p>
                <p><button><a href=/>Start again</a></button></p>
              </body>
              </html>
            ]],
              session:get_subject() or "Anonymous",
              err or "no error"
            ))
          }
        }
    }
# Set default generic server vars here

# global_backend
upstream global_backend {
  server 0.0.0.1:1000 max_fails=3 fail_timeout=5s;

  balancer_by_lua_block {
  local balancer = require "ngx.balancer"
  local host = ngx.var.proxy_host
  local port = ngx.var.proxy_port
  local backendHttps = ngx.var.proxy_host_scheme
  local ok, err = balancer.set_current_peer(host, port)
      if not ok then
      ngx.log(ngx.ERR, "balancer.set_current_peer failed to set the host " .. host .. ":" .. port .. " current peer: ", err)
      return ngx.exit(500)
      end
  }

  keepalive 10; # connection pool
}
# global_backend ends

# /var/run/nginx/nginx.sock

server {

    listen unix:/var/run/nginx/nginx.sock;
    server_name _;
    include /tmp/resolver.conf;
    default_type text/plain;

    location /
    {

    proxy_ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;

    set $upstream_endpoint $http_x_origin_host;
    set $upstream_port $http_x_origin_port;
    set $upstream_scheme $http_x_origin_scheme;

    if ( $upstream_endpoint = "" ) {
    return 200 "$http_x_origin_host host header validation failed. Please refer to the Technical Documentation!";
    }

    if ( $upstream_port != "" ) {
    set $upstream_endpoint $upstream_endpoint:$upstream_port;
    }

    if ( $upstream_scheme = "" ) {
    set $upstream_scheme "http://";
    }

        proxy_set_header HTTPS "on";
        proxy_ssl_verify_depth 2;
        proxy_set_header X-Forwarded-Proto https;

    proxy_read_timeout     120;
    proxy_connect_timeout  120;

    proxy_http_version 1.1;

     proxy_set_header Connection "";

     proxy_pass_request_headers      on;
     proxy_set_header host $host;
     proxy_set_header X-Forwarded-Host $http_X-Origin-Host;
     proxy_set_header X-Real-IP $http_X-Real-IP;
     proxy_set_header X-Forwarded-For $http_proxy_add_x_forwarded_for;
     proxy_pass $upstream_scheme$upstream_endpoint;

}
}

server {
        listen       80 default_server;
        server_name _;

        limit_req zone=req_zone burst=10 nodelay;
        limit_req zone=req_zone_wl burst=20 nodelay;

        # resolver 127.0.0.1 local=on;
        include /tmp/resolver.conf;         #   For kubernetes use 10.43.0.10 and nginx ingress controller

          # define shared variables between lua and nginx lua balancer;
          set $proxy_host "";
          set $proxy_port "";
          set $proxy_host_scheme "http";
          
          set $proxy_host_override "";
          set $proxy_route_server "openresty-default-route-443";
          set $upstream_server "global_backend";

          set_by_lua $now "return ngx.cookie_time(ngx.time())";
          set $aws_signature "";
          set $aws_access_key "";
          set $aws_secret_key "";
          set $bucket_name "";
          set $bucket_file_path "";
          set $string_to_sign "";
          set $authorization_header_override "";

          # Endpoint used for performing domain verification with Let's Encrypt.
          location /.well-known/acme-challenge/ {
          content_by_lua_block {
              auto_ssl:challenge_server()
          }
          }   

          location / {
            access_log /var/log/nginx/access.log main;
            error_log  /var/log/nginx/error.log;
            # access_log  on;
            # error_log on;
            default_type text/plain;
            set_by_lua_block $frontdoor_global_vars {
              local executableRule, proxyServerName = {}, nil
              return Cjson.encode({
                executableRule = executableRule,
                proxyServerName = proxyServerName
              })
            }
            
            rewrite_by_lua_file /usr/local/openresty/nginx/html/api/gateway_ack.lua;
            access_by_lua_file /usr/local/openresty/nginx/html/api/gateway_resp.lua;
            # this code run just before the setting the proxy pass and content phase.

          # proxy_set_header proxy_http_version 1.1;
          proxy_set_header host $proxy_host_override;
          
          proxy_ssl_protocols           TLSv1 TLSv1.1 TLSv1.2;
          proxy_ssl_ciphers             HIGH:!aNULL:!MD5;
          proxy_ssl_verify        off;
          proxy_ssl_verify_depth  2;
          proxy_ssl_session_reuse on;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_ssl_server_name on;

          proxy_set_header x-route-server $proxy_route_server;
          proxy_set_header Host $proxy_host_override;
          proxy_pass $proxy_host_scheme://$upstream_server;
        
          }

        location = /frontdoor/opsapi/sync {
          default_type 'application/json';
          if ($request_method = 'OPTIONS') {
              add_header 'Access-Control-Allow-Origin' '*';
              add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
              add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With';
              add_header 'Access-Control-Max-Age' 1728000;
              add_header 'Content-Type' 'text/plain; charset=utf-8';
              # add_header 'Content-Length' 0;
              return 204;
          }
          content_by_lua_file /usr/local/openresty/nginx/html/api/sync_data.lua;
        }
        location = /frontdoor/opsapi/handle-profile {
          default_type 'application/json';
          add_header 'Access-Control-Allow-Origin' '*';
          add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
          content_by_lua_file /usr/local/openresty/nginx/html/api/profile_handler.lua;
        }

        location = /__resolver_test__
        {
        default_type text/html;
          content_by_lua_block {
            local resolver = require "local-resolver"
            resolver = resolver.new("/etc/hosts")
--              local host_ip_addr = resolver:resolve("kube-dns.kube-system.svc.cluster.local") -- kube-dns did not work
            local host_ip_addr = resolver:resolve("localhost")  -- localhost worked
            ngx.say(host_ip_addr)
            ngx.exit(ngx.HTTP_OK)
          }
        }

        location /__ip_location {
            default_type text/html;
            content_by_lua_block {
                local ip2location = require('ip2location')
                local ip2loc = ip2location:new('/tmp/IP2LOCATION-LITE-DB11.IPV6.BIN')
                local result = ip2loc:get_all('106.196.55.155')
                ngx.say("country_short: " .. result.country_short)
                ngx.say("country_long: " .. result.country_long)
                ngx.say("region: " .. result.region)
                ngx.say("city: " .. result.city)
                ngx.say("isp: " .. result.isp)
                ngx.say("latitude: " .. result.latitude)
                ngx.say("longitude: " .. result.longitude)
                ngx.say("domain: " .. result.domain)
                ngx.say("zipcode: " .. result.zipcode)
                ngx.say("timezone: " .. result.timezone)
                ngx.say("netspeed: " .. result.netspeed)
                ngx.say("iddcode: " .. result.iddcode)
                ngx.say("areacode: " .. result.areacode)
                ngx.say("weatherstationcode: " .. result.weatherstationcode)
                ngx.say("weatherstationname: " .. result.weatherstationname)
                ngx.say("mcc: " .. result.mcc)
                ngx.say("mnc: " .. result.mnc)
                ngx.say("mobilebrand: " .. result.mobilebrand)
                ngx.say("elevation: " .. result.elevation)
                ngx.say("usagetype: " .. result.usagetype)
                ngx.say("addresstype: " .. result.addresstype)
                ngx.say("category: " .. result.category)
                ngx.say("district: " .. result.district)
                ngx.say("asn: " .. result.asn)
                ngx.say("as: " .. result.as)
                ip2loc:close()
            }
        }

        location /__redis_test {            
            default_type 'application/json';
            content_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()

                red:set_timeouts(1000, 1000, 1000) -- 1 sec

                -- or connect to a unix domain socket file listened
                -- by a redis server:
                --     local ok, err = red:connect("unix:/path/to/redis.sock")

                -- connect via ip address directly
                local ok, err = red:connect("redis", 6379)

                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end

                ok, err = red:set("dog", "an animal")
                if not ok then
                    ngx.say("failed to set dog: ", err)
                    return
                end

                ngx.say("set result: ", ok)

                local res, err = red:get("dog")
                if not res then
                    ngx.say("failed to get dog: ", err)
                    return
                end

                if res == ngx.null then
                    ngx.say("dog not found.")
                    return
                end

                ngx.say("dog: ", res)

                red:init_pipeline()
                red:set("cat", "Marry")
                red:set("horse", "Bob")
                red:get("cat")
                red:get("horse")
                local results, err = red:commit_pipeline()
                if not results then
                    ngx.say("failed to commit the pipelined requests: ", err)
                    return
                end

                for i, res in ipairs(results) do
                    if type(res) == "table" then
                        if res[1] == false then
                            ngx.say("failed to run command ", i, ": ", res[2])
                        else
                            -- process the table value
                        end
                    else
                        -- process the scalar value
                    end
                end

                -- put it into the connection pool of size 100,
                -- with 10 seconds max idle time
                local ok, err = red:set_keepalive(10000, 100)
                if not ok then
                    ngx.say("failed to set keepalive: ", err)
                    return
                end

                -- or just close the connection right away:
                -- local ok, err = red:close()
                -- if not ok then
                --     ngx.say("failed to close: ", err)
                --     return
                -- end
            }

        }

        #comment
        error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        location ~ /\.ht {
            deny  all;
        }

    }
  
      server {
        listen       80;
        server_name  sessions-api.test.dmz.it.com;
        default_type text/html;
    
        location / {
          content_by_lua_block {
            ngx.say([[
              <html>
              <body>
                <button><a href=/start>Start the test</a></button>
              </body>
              </html>
            ]])
          }
        }
    
        location /start {
          content_by_lua_block {
            local session = require "resty.session".new()
            session:set_subject("OpenResty Fan")
            session:set("quote", "The quick brown fox jumps over the lazy dog")
            local ok, err = session:save()
           
            ngx.say(string.format([[
              <html>
              <body>
                <p>Session started (%s)</p>
                <p><button><a href=/started>Check if it really was</a></button></p>
              </body>
              </html>
            ]], err or "no error"))
          }
        }
    
        location /started {
          content_by_lua_block {
            local session, err = require "resty.session".start()
            
            ngx.say(string.format([[
              <html>
              <body>
                <p>Session was started by %s (%s)</p>
                <p><blockquote>%s</blockquote></p>
                <p><button><a href=/modify>Modify the session</a></button></p>
              </body>
              </html>
            ]],
              session:get_subject() or "Anonymous",
              err or "no error",
              session:get("quote") or "no quote"
            ))
          }
        }
        
        location /modify {
          content_by_lua_block {
            local session, err = require "resty.session".start()
            session:set_subject("Lua Fan")
            session:set("quote", "Lorem ipsum dolor sit amet")
            local _, err_save = session:save()
            
            ngx.say(string.format([[
              <html>
              <body>
                <p>Session was modified (%s)</p>
                <p><a href=/modified>Check if it is modified</a></p>
              </body>
              </html>
            ]], err or err_save or "no error"))
          }
        }
        
        location /modified {
          content_by_lua_block {
            local session, err = require "resty.session".start()
    
            ngx.say(string.format([[
              <html>
              <body>
                <p>Session was started by %s (%s)</p>
                <p><blockquote>%s</blockquote></p>
                <p><button><a href=/destroy>Destroy the session</a></button></p>
              </body>
              </html>
            ]],
              session:get_subject() or "Anonymous",
              err or "no error",
              session:get("quote")  or "no quote"
            ))
          }
        }
        
        location /destroy {
          content_by_lua_block {
            local ok, err = require "resty.session".destroy()
    
            ngx.say(string.format([[
              <html>
              <body>
                <p>Session was destroyed (%s)</p>
                <p><button><a href=/destroyed>Check that it really was?</a></button></p>
              </body>
              </html>
            ]], err or "no error"))
          }
        }
        
        location /destroyed {
          content_by_lua_block {
            local session, err = require "resty.session".open()
    
            ngx.say(string.format([[
              <html>
              <body>
                <p>Session was really destroyed, you are known as %s (%s)</p>
                <p><button><a href=/>Start again</a></button></p>
              </body>
              </html>
            ]],
              session:get_subject() or "Anonymous",
              err or "no error"
            ))
          }
        }    
      }

  include /opt/nginx/conf.d/*.conf;
}
