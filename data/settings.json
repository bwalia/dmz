{
    "dns_resolver": {
        "nameservers": {
            "primary": "10.0.0.10",
            "secondary": "10.0.0.10",
            "port": "53"
        }
    },
    "consul": {
        "dns_server_host": "127.0.0.1",
        "dns_server_port": 8600
    },
    "redis_host": "",
    "redis_port": "localhost",
    "super_user": {
        "email": "admin@admin.com",
        "password": "jGl25bVBBBW96Qi9Te4V37Fnqchz/Eu4qB9vKrRIqRg=",
        "username": "admin"
    },
    "ip2location_path": "/usr/local/openresty/nginx/IP2LOCATION-LITE-DB11.IPV6.BIN",
    "nginx": {
        "content_type": "text/html",
        "default": {
            "no_server": "",
            "conf_mismatch": "",
            "no_rule": ""
        }
    },
    "storage_type": "disk",
    "roles": [
        "release_manager",
        "admin",
        "read_only",
        "read_write"
    ],
    "env_vars": {
        "STACK": "Lua 5.1",
        "APP_NAME": "dmz",
        "REDIS_HOST": "dmz-redis",
        "REDIS_PORT": 6379,
        "NGINX_CONFIG_DIR": "/opt/nginx",
        "VITE_DEPLOYMENT_TIME": "20240821210059",
        "CONTROL_PLANE_API_URL": "http://gateway.dmz.it.com//api",
        "VERSION": "1.0",
        "FRONT_URL": "http://frontend.dmz.it.com",
        "HOSTNAME": "localhost",
        "API_PAGE_SIZE": 100,
        "JWT_SECURITY_PASSPHRASE": "HCsKpxQ4hU97V5us5TCwvLnAVBgLqNd1dP2R-4Uywg7946J3zAqT9EOA5hdWRCQn"
    },
    "env_profile": "prod"
}