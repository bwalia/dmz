server {
    listen       *:80 default_server;
    server_name _;

            location ~ [^/]\.php(/|$) {
            default_type text/html;
	        access_log      /var/log/nginx/access.log;
            fastcgi_split_path_info ^(.+?\.php)(/.*)$;
            if (!-f $document_root$fastcgi_script_name) {
            return 404;
            }

            # Mitigate https://httpoxy.org/ vulnerabilities
            fastcgi_param HTTP_PROXY "";
            fastcgi_intercept_errors on;
            fastcgi_index  index.php;
            include        fastcgi_params;
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            fastcgi_pass   unix:/var/run/php-fpm/www.sock;
        }

    location /
    {	
    return 301 https://www.healthdata.be/;
    break;
    }
}




upstream formiofront {
    server formioFront:80;
}
upstream formio {
    server formio:80;
}
upstream hdconnectproxy {
    server hd-connect-proxy:8080;
}

resolver 127.0.0.11 valid=1s ipv6=off;

server {
    listen 8082 ssl;

    server_name hd4dp.healthdata.be www.hd4dp.healthdata.be;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_certificate /etc/nginx/ssl/server.crt;
    ssl_certificate_key /etc/nginx/ssl/server.key;
    error_page 497 301 =307 https://$host:$server_port$request_uri;

    default_type application/octet-stream;
    gzip                    on;
    gzip_comp_level         6;
    gzip_vary               on;
    gzip_min_length         1000;
    gzip_proxied            any;
    gzip_types              text/plain text/css application/json application/x-javascript application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_buffers            16 8k;
    client_max_body_size    256M;

    root /usr/share/nginx/html;

    access_log  off;
    error_log /dev/stdout error;

    resolver 127.0.0.11 valid=1s ipv6=off;

    location / {
        auth_basic           "API Auth";
        auth_basic_user_file /etc/nginx/passwd;
        proxy_pass http://hdconnectproxy;
        proxy_redirect off;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Host $server_name;
        keepalive_timeout 0;
        keepalive_requests 1;
        proxy_read_timeout 10s;
        proxy_connect_timeout 10s;
        proxy_send_timeout 10s;
    }


    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

}

server {
    listen 4201 ssl;
    default_type application/octet-stream;

    server_name hd4dp.healthdata.be www.hd4dp.healthdata.be;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_certificate /etc/nginx/ssl/server.crt;
    ssl_certificate_key /etc/nginx/ssl/server.key;
    error_page 497 301 =307 https://$host:$server_port$request_uri;

    gzip                    on;
    gzip_comp_level         6;
    gzip_vary               on;
    gzip_min_length         1000;
    gzip_proxied            any;
    gzip_types              text/plain text/css application/json application/x-javascript application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_buffers            16 8k;
    client_max_body_size    256M;

    root /usr/share/nginx/html;

    access_log  off;
    error_log /dev/stdout error;

    error_page 480 /error.html;

    location / {

            set $jwt_token_value "";
            set $api_gw_token "";
            set $api_gw_cookie "";
            default_type text/plain;

            header_filter_by_lua_block {
                local cjson = require "cjson"
                local jwt = require "resty.jwt"
                local jwt_cookie = ngx.var.cookie_API_SESSION
                local formio_jwt_token = ""

                local jwt_token = jwt:sign(
                    "lua-resty-jwt",
                    {
                        header={type="JWT", alg="HS256"},
                        payload={psuedouser="websecops@sciensano.be"}
                    }
                )

        formio_jwt_token = ngx.resp.get_headers()['x-jwt-token']
        ngx.var.jwt_token_value = formio_jwt_token
        ngx.var.api_gw_cookie = jwt_cookie
        ngx.header['Set-Cookie'] = 'API_SESSION='.. jwt_token .. '; path=/'
        }

        if ($http_user_agent ~ MSIE) {
          return 480;
        }

        if ($http_user_agent ~ 'rv:11') {
          return 480;
        }

        rewrite ^/(.*) /$1 break;
        proxy_pass http://formioFront;
        keepalive_timeout 0;
        keepalive_requests 1;
        proxy_read_timeout 10s;
        proxy_connect_timeout 10s;
        proxy_send_timeout 10s;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

        location /api/ {
        rewrite ^/api/(.*) /$1 break;
        proxy_pass http://formio;
        keepalive_timeout 0;
        keepalive_requests 1;
        proxy_read_timeout 10s;
        proxy_connect_timeout 10s;
        proxy_send_timeout 10s;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

location /proxy/
{
    access_by_lua_block {
    
    res1, res2 = ngx.location.capture_multi{
        { "/__verify_api_gateway__", { args = "auth_type=public_api_endpoint" } },
        { "/__secure_proxy__" },
    }

    if res1.status == ngx.HTTP_FORBIDDEN then
                    ngx.status = ngx.HTTP_FORBIDDEN
                    ngx.say("Forbidden by Sciensano API Gateway")
                    ngx.exit(ngx.HTTP_OK)

    else

        if res2.status == ngx.HTTP_OK then
                    ngx.status = ngx.HTTP_OK
                    ngx.say('{"organisations": "My organisations database acccessible by this secure api","security_policy": "Data access via API is secured by Sciensano API Gateway"}')
                    ngx.exit(ngx.HTTP_OK)
        end

    end
    }

    }
}

    location /__secure_proxy__/ {
        rewrite ^/__secure_proxy__/(.*) /$1 break;
        rewrite ^/proxy/(.*) /$1 break;
        proxy_pass http://hdconnectproxy;
        keepalive_timeout 0;
        keepalive_requests 1;
        proxy_read_timeout 10s;
        proxy_connect_timeout 10s;
        proxy_send_timeout 10s;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $proxy_protocol_port;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Prefix /proxy;
        proxy_cache_bypass $http_upgrade;
    }

    location /auth/ {
        rewrite ^/auth/(.*) /auth/$1 break;
        proxy_pass http://hdconnectproxy;
        keepalive_timeout 0;
        keepalive_requests 1;
        proxy_read_timeout 10s;
        proxy_connect_timeout 10s;
        proxy_send_timeout 10s;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    location /error.html {
        root /var/www/html/healthdata/error;
    }

location = /__verify_api_gateway__
    {
    set $api_gw_authenticated_ok 'false';
    set $api_gw_debug_is_enabled 'false';
    content_by_lua_block {
            local jwt_cookie = ngx.var.cookie_API_SESSION
            local cjson = require "cjson"
            local jwt = require "resty.jwt"
            local jwt_obj = jwt:verify("lua-resty-jwt", jwt_cookie)
            ngx.var.api_gw_authenticated_ok = jwt_obj.verified
                -- enable the following line of code to see the decoded jwt object
                -- for debugging only never do this in production
            if ngx.var.api_gw_authenticated_ok == "true" then

                if ngx.var.api_gw_debug_is_enabled == "true" then
                ngx.status = ngx.HTTP_OK
                ngx.say(cjson.encode(jwt_obj))
                end

            else
            ngx.status = ngx.HTTP_FORBIDDEN
            ngx.say("Forbidden by Sciensano API Gateway")
            end

            ngx.exit(ngx.HTTP_OK)
        }        
    }


}